<!DOCTYPE html>
<html lang="hu">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="csrf-token" content="<%= csrfToken %>" />
        <title>WebNotes -//- Regisztráció</title>
        <link href="/css/tabler.min.css" rel="stylesheet" />
        <link href="/css/demo.min.css" rel="stylesheet" />
        <link href="/css/auth.css" rel="stylesheet" />
        <link href="/css/custom.css" rel="stylesheet" />
        <link href="/css/tabler-icons-outline.min.css" rel="stylesheet" />
        <link href="https://cdn.jsdelivr.net/npm/sweetalert2@7.12.15/dist/sweetalert2.min.css" rel="stylesheet" />
    </head>
    <body class="d-flex flex-column">
        <script src="/js/theme.min.js"></script>
        <div class="theme-toggle">
            <a href="#" class="nav-link px-0 hide-theme-dark" title="Sötét mód bekapcsolása" data-bs-toggle="tooltip" data-bs-placement="bottom">
                <i class="ti ti-moon"></i>
            </a>
            <a href="#" class="nav-link px-0 hide-theme-light" title="Világos mód bekapcsolása" data-bs-toggle="tooltip" data-bs-placement="bottom">
                <i class="ti ti-sun"></i>
            </a>
        </div>
        <div class="page page-center">
            <div class="container container-tight py-4" style="max-width: 650px">
                <div class="text-center mb-4">
                    <a href="/" class="navbar-brand navbar-brand-autodark">
                        <img src="/img/logo/WebNotes.svg" width="110" height="32" alt="WebNotes" class="navbar-brand-image" />
                    </a>
                </div>
                <div class="card card-md">
                    <div class="card-body">
                        <h2 class="h2 text-center mb-4"> Hozz létre egy fiókot! </h2>
                        <form id="registerForm">
                            <div class="row">
                                <input type="hidden" id="csrf_token" name="_csrf" value="<%= csrfToken %>" />
                                <div class="mb-3">
                                    <label class="form-label">Felhasználónév</label>
                                    <input type="text" class="form-control" placeholder="Felhasználónév" id="username" name="username" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">E-mail cím</label>
                                    <input type="email" class="form-control" placeholder="E-mail cím" id="email" name="email" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Jelszó</label>
                                    <div class="input-group">
                                        <input type="password" class="form-control" placeholder="Jelszó" id="create_password" name="create_password" />
                                        <span class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="right" title="A jelszónak legalább 8 karakter hosszúnak kell lennie, tartalmaznia kell kis- és nagybetűt, számot és speciális karaktert.">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-info-circle" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                <circle cx="12" cy="12" r="9" />
                                                <line x1="12" y1="8" x2="12.01" y2="8" />
                                                <polyline points="11 12 12 12 12 16 13 16" />
                                            </svg>
                                        </span>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Jelszó megerősítése</label>
                                    <input type="password" class="form-control" placeholder="Jelszó megerősítése" id="confirm_password" name="confirm_password" />
                                </div>
                            </div>

                            <div class="form-footer">
                                <button type="submit" id="registerButton" class="btn btn-primary w-100">
                                    <i class="ti ti-user-plus p-0 me-1"></i>

                                    Regisztráció
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="text-center text-secondary mt-3"> Már van fiókod? <a href="/">Jelentkezz be</a> </div>
            </div>
        </div>
        <script src="/js/tabler.min.js" defer></script>
        <script src="/js/theme.js" defer></script>
        <script id="dev"></script>
        <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10.10.1/dist/sweetalert2.all.min.js"></script>
        <script>
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.onmouseenter = Swal.stopTimer
                    toast.onmouseleave = Swal.resumeTimer
                },
            })
        </script>
        <script>
            $(document).ready(function () {
                $('#registerForm').on('submit', function (e) {
                    e.preventDefault()

                    let $submitButton = $('#registerButton')
                    $submitButton.prop('disabled', true).html(`<i class="ti ti-loader-2 spinner-rotate"></i> Regisztráció...`)

                    let formData = {
                        username: $('#username').val()?.trim() || '',
                        email: $('#email').val()?.trim() || '',
                        create_password: $('#create_password').val()?.trim() || '',
                        confirm_password: $('#confirm_password').val()?.trim() || '',
                    }

                    $.ajax({
                        type: 'POST',
                        url: '/register',
                        contentType: 'application/json',
                        headers: { 'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content') },
                        data: JSON.stringify(formData),
                        success: function (response) {
                            if (response.success) {
                                Toast.fire({
                                    icon: 'success',
                                    title: 'Sikeres regisztráció! Átirányítás...',
                                })
                                setTimeout(() => {
                                    window.location.href = response.redirect
                                }, 2000)
                            }
                        },
                        error: function (xhr) {
                            $submitButton.prop('disabled', false).html(`<i class="ti ti-user-plus p-0 me-1"></i> Regisztráció`)

                            try {
                                let response = xhr.responseJSON
                                $('.error-message').remove()
                                $('.form-control').removeClass('input-error')
                                $('.input-group').removeClass('has-error')

                                if (xhr.status === 400 && response.errors) {
                                    response.errors.forEach((error) => {
                                        if (error.path) {
                                            let field = $('#' + error.path)
                                            if (field.length) {
                                                // Check if field is in an input group
                                                let inputGroup = field.closest('.input-group')
                                                let isGrouped = inputGroup.length > 0

                                                // Handle error message placement
                                                if (isGrouped) {
                                                    // For input groups, add error after the entire group
                                                    inputGroup.addClass('has-error')

                                                    if (!inputGroup.next('.error-message').length) {
                                                        inputGroup.after(`<div class="error-message">${error.msg}</div>`)
                                                    }
                                                } else {
                                                    // For regular inputs, add error after the field
                                                    if (!field.next('.error-message').length) {
                                                        field.after(`<div class="error-message">${error.msg}</div>`)
                                                    }
                                                }

                                                // Add error class to the field
                                                field.addClass('input-error')

                                                // Handle error icon
                                                let wrapper = field.closest('.input-wrapper')
                                                let errorIcon = wrapper.find('.error-icon')
                                                if (errorIcon.length) {
                                                    errorIcon.removeClass('hidden-icon')
                                                }

                                                // Handle input events to clear errors
                                                field.on('input', function () {
                                                    if ($(this).val().trim().length > 0) {
                                                        $(this).removeClass('input-error')

                                                        if (isGrouped) {
                                                            inputGroup.removeClass('has-error')
                                                            inputGroup.next('.error-message').addClass('hidden')
                                                        } else {
                                                            $(this).next('.error-message').addClass('hidden')
                                                        }

                                                        if (errorIcon.length) {
                                                            errorIcon.addClass('hidden-icon')
                                                        }
                                                    } else {
                                                        $(this).addClass('input-error')

                                                        if (isGrouped) {
                                                            inputGroup.addClass('has-error')
                                                            inputGroup.next('.error-message').removeClass('hidden')
                                                        } else {
                                                            $(this).next('.error-message').removeClass('hidden')
                                                        }

                                                        if (errorIcon.length) {
                                                            errorIcon.removeClass('hidden-icon')
                                                        }
                                                    }
                                                })
                                            }
                                        } else {
                                            Toast.fire({
                                                icon: 'error',
                                                title: error.msg,
                                            })
                                        }
                                    })
                                } else {
                                    Toast.fire({
                                        icon: 'error',
                                        title: 'Ismeretlen hiba történt. Próbáld újra!',
                                    })
                                }
                            } catch (e) {
                                Toast.fire({
                                    icon: 'error',
                                    title: 'Hiba történt! Próbáld újra később.',
                                })
                            }
                        },
                    })
                })
            })
        </script>
    </body>
</html>
