<!DOCTYPE html>
<html lang="hu">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>WebNotes - Jegyzetek</title>
        <link rel="stylesheet" href="/css/tabler.min.css" />
        <link href="/css/tabler-icons-outline.min.css" rel="stylesheet" />
        <link href="/css/custom.css" rel="stylesheet" />

        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />
        <script src="/libs/tinymce/tinymce.min.js"></script>
    </head>
    <body>
        <div class="page">
            <header class="navbar navbar-expand-md navbar-light d-print-none">
                <div class="container-xl">
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbar-menu">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <h1 class="navbar-brand navbar-brand-autodark">
                        <a href="/">
                            <span class="fs-2">WebNotes</span>
                        </a>
                    </h1>

                    <div class="navbar-nav flex-row order-md-last">
                        <!-- Theme switcher 
                        <div class="nav-item me-3">
                            <a href="?theme=dark" class="nav-link px-0 hide-theme-dark" title="Sötét mód bekapcsolása" data-bs-toggle="tooltip" data-bs-placement="bottom">
                                <i class="ti ti-moon"></i>
                            </a>
                            <a href="?theme=light" class="nav-link px-0 hide-theme-light" title="Világos mód bekapcsolása" data-bs-toggle="tooltip" data-bs-placement="bottom">
                                <i class="ti ti-sun"></i>
                            </a>
                        </div>
                        -->

                        <div class="nav-item dropdown">
                            <a href="#" class="nav-link d-flex lh-1 text-reset p-0" data-bs-toggle="dropdown">
                                <span class="avatar avatar-sm rounded"> <%= user.username.charAt(0).toUpperCase() %> </span>
                                <div class="d-none d-xl-block ps-2">
                                    <div class="user-name">
                                        <%= user.name %> <% if (user.role === "admin") { %>
                                        <i id="admin" class="ti ti-crown"></i>
                                        <% } else if (user.role === "premium") { %>
                                        <i id="premium" class="ti ti-star"></i>
                                        <% } %>
                                    </div>

                                    <div class="mt-1 small text-muted"><%= user.email %></div>
                                </div>
                            </a>
                            <div class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                                <a href="/profile" class="dropdown-item"> <i class="ti ti-user me-1"></i>Profil </a>
                                <a href="/settings" class="dropdown-item"> <i class="ti ti-settings me-1"></i>Beállítások </a>
                                <div class="dropdown-divider"></div>
                                <a href="/logout" class="dropdown-item text-danger"> <i class="ti ti-logout me-1"></i>Kijelentkezés </a>
                            </div>
                        </div>
                    </div>
                </div>
            </header>

            <div class="page-wrapper">
                <div class="page-header d-print-none">
                    <div class="container-xl">
                        <div class="row align-items-center">
                            <div class="col">
                                <h2 class="page-title">Jegyzetek</h2>
                            </div>
                            <div class="col-auto ms-auto d-print-none">
                                <button class="btn btn-primary d-inline-flex align-items-center" onclick="openNoteModal()">
                                    <i class="ti ti-plus icon me-1"></i>
                                    Új jegyzet
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="page-body">
                    <div class="container-xl">
                        <div class="card mb-3">
                            <div class="card-body">
                                <div class="input-icon">
                                    <span class="input-icon-addon">
                                        <i class="ti ti-search"></i>
                                    </span>
                                    <input type="text" class="form-control" placeholder="Jegyzetek keresése..." id="searchInput" />
                                </div>
                            </div>
                        </div>

                        <div class="row row-cards" id="noteList"> </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal modal-blur fade" id="noteModal" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
                <div class="modal-content">
                    <form id="noteForm" onsubmit="saveNote(event)">
                        <div class="modal-header">
                            <h5 class="modal-title">Új jegyzet</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <label class="form-label required">Cím</label>
                                <input type="text" class="form-control" id="noteTitle" name="title" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label required">Tartalom</label>
                                <textarea id="noteContent" name="content" class="form-control"></textarea>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Címkék</label>
                                <input type="text" class="form-control" id="noteTags" name="tags" placeholder="Címkék vesszővel elválasztva" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-link link-secondary me-auto" data-bs-dismiss="modal"> Mégse </button>
                            <button type="submit" class="btn btn-primary">
                                <i class="ti ti-device-floppy icon me-1"></i>
                                Mentés
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <script src="/js/tabler.min.js"></script>
        <script src="/js/demo.min.js"></script>
        <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
        <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
        <script>
            toastr.options = {
                closeButton: false,
                debug: false,
                newestOnTop: false,
                progressBar: false,
                positionClass: 'toast-top-left',
                preventDuplicates: false,
                onclick: null,
                showDuration: '300',
                hideDuration: '1000',
                timeOut: '5000',
                extendedTimeOut: '1000',
                showEasing: 'swing',
                hideEasing: 'linear',
                showMethod: 'fadeIn',
                hideMethod: 'fadeOut',
            }
        </script>
        <script>
            tinymce.init({
                selector: '#noteContent',
                height: 300,
                language: 'hu_HU',
                menubar: false,
                plugins: ['advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview', 'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen', 'insertdatetime', 'media', 'table', 'wordcount', 'emoticons'],
                toolbar: 'undo redo | blocks | ' + 'emoticons |' + 'bold italic backcolor | alignleft aligncenter ' + 'alignright alignjustify | bullist numlist outdent indent | ' + 'removeformat',
                content_style: 'body { font-family: -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica Neue, sans-serif; font-size: 14px; }',
            })

            let notes = []
            const noteModal = new bootstrap.Modal(document.getElementById('noteModal'))

            document.addEventListener('DOMContentLoaded', () => {
                loadNotes()
                initSearchHandler()
            })

            async function loadNotes() {
                try {
                    const response = await fetch('/notes/list')
                    const data = await response.json()

                    if (data.status === 'success') {
                        notes = data.notes
                        renderNotes(notes)
                    } else {
                        showError('Hiba történt a jegyzetek betöltésekor')
                    }
                } catch (error) {
                    showError('Nem sikerült kapcsolódni a szerverhez')
                }
            }

            function renderNotes(notesToRender) {
                const noteList = document.getElementById('noteList')

                if (notesToRender.length === 0) {
                    noteList.innerHTML = `
            <div class="col-12">
              <div class="card card-body text-center">
                <i class="ti ti-notes-off icon-lg text-muted mb-3"></i>
                <h3>Nincsenek jegyzetek</h3>
                <p class="text-muted">Hozz létre egy új jegyzetet a "+" gombbal!</p>
              </div>
            </div>`
                    return
                }

                noteList.innerHTML = notesToRender
                    .map(
                        (note) => `
          <div class="col-md-4">
            <div class="card">
              <div class="card-header">
                <h3 class="card-title">${escapeHtml(note.title)}</h3>
                <div class="card-actions">
                  <div class="dropdown">
                    <a href="#" class="btn-action dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                      <i class="ti ti-dots-vertical"></i>
                    </a>
                    <div class="dropdown-menu dropdown-menu-end">
                      <a class="dropdown-item" href="#" onclick="editNote(${note.id})">
                        <i class="ti ti-edit icon dropdown-item-icon"></i>
                        Szerkesztés
                      </a>
                      <a class="dropdown-item text-danger" href="#" onclick="deleteNote(${note.id})">
                        <i class="ti ti-trash icon dropdown-item-icon"></i>
                        Törlés
                      </a>
                    </div>
                  </div>
                </div>
              </div>
              <div class="card-body">
                <div class="text-muted mb-3">
                  ${note.createdAt ? new Date(note.createdAt).toLocaleDateString('hu-HU') : 'Nincs dátum'}
                </div>
                <div class="card-text">
                  ${note.content}
                </div>
                ${
                    note.tags && note.tags.length > 0
                        ? `
                  <div class="mt-3">
                    ${note.tags
                        .map(
                            (tag) => `
                      <span class="badge bg-blue-lt me-1">${escapeHtml(tag)}</span>
                    `
                        )
                        .join('')}
                  </div>
                `
                        : ''
                }
              </div>
            </div>
          </div>
        `
                    )
                    .join('')
            }

            function initSearchHandler() {
                const searchInput = document.getElementById('searchInput')
                let timeoutId

                searchInput.addEventListener('input', (e) => {
                    clearTimeout(timeoutId)
                    timeoutId = setTimeout(() => {
                        const searchTerm = e.target.value.toLowerCase()
                        const filteredNotes = notes.filter((note) => note.title.toLowerCase().includes(searchTerm) || note.content.toLowerCase().includes(searchTerm) || note.tags.some((tag) => tag.toLowerCase().includes(searchTerm)))
                        renderNotes(filteredNotes)
                    }, 300)
                })
            }

            async function saveNote(event) {
                event.preventDefault()
                const form = event.target
                const formData = new FormData(form)
                const content = tinymce.get('noteContent').getContent()
                const tags = formData
                    .get('tags')
                    .split(',')
                    .map((tag) => tag.trim())
                    .filter((tag) => tag.length > 0)

                const noteData = {
                    title: formData.get('title'),
                    content: content,
                    tags: tags,
                    createdAt: new Date().toISOString(),
                }

                try {
                    const response = await fetch('/notes/save', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            notes: JSON.stringify([noteData]),
                        }),
                    })

                    const data = await response.json()

                    if (data.status === 'success') {
                        await loadNotes()
                        noteModal.hide()
                        form.reset()
                        tinymce.get('noteContent').setContent('')
                        showSuccess('Jegyzet sikeresen mentve!')
                    } else {
                        showError(data.message || 'Hiba történt a mentés során')
                    }
                } catch (error) {
                    console.error(error)
                    showError('Nem sikerült menteni a jegyzetet')
                }
            }

            function escapeHtml(unsafe) {
                return unsafe.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;')
            }

            function showSuccess(message) {
                alert(message) // TODO: Implement Tabler toast
            }

            function showError(message) {
                alert(message) // TODO: Implement Tabler toast
            }

            function openNoteModal() {
                document.getElementById('noteForm').reset()
                tinymce.get('noteContent').setContent('')
                noteModal.show()
            }

            function editNote(id) {
                const note = notes.find((n) => n.id === id)
                if (!note) return

                document.getElementById('noteTitle').value = note.title
                tinymce.get('noteContent').setContent(note.content)
                document.getElementById('noteTags').value = note.tags.join(', ')
                noteModal.show()
            }

            function deleteNote(id) {
                if (confirm('Biztosan törölni szeretnéd ezt a jegyzetet?')) {
                    console.log('Törlés:', id) // TODO: Implement delete API
                }
            }
        </script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // Téma preferencia mentése
                const saveTheme = (theme) => {
                    localStorage.setItem('theme', theme)
                    document.body.setAttribute('data-bs-theme', theme)
                }

                // Témaváltó linkek kezelése
                document.querySelectorAll('[href^="?theme="]').forEach((link) => {
                    link.addEventListener('click', (e) => {
                        e.preventDefault()
                        const theme = e.currentTarget.href.includes('dark') ? 'dark' : 'light'
                        saveTheme(theme)
                    })
                })

                // Mentett téma betöltése
                const savedTheme = localStorage.getItem('theme') || 'light'
                document.body.setAttribute('data-bs-theme', savedTheme)
            })
        </script>
    </body>
</html>
