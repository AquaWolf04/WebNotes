const bcrypt = require('bcryptjs')
const logger = require('../../utils/logger')
const { body, validationResult } = require('express-validator')
const { User } = require('../models')

// ‚úÖ **Regisztr√°ci√≥ valid√°l√°sa**
const validateRegister = [
    body('last_name').notEmpty().withMessage('A vezet√©kn√©v k√∂telez≈ë.'),
    body('first_name').notEmpty().withMessage('A keresztn√©v k√∂telez≈ë.'),
    body('username').notEmpty().withMessage('A felhaszn√°l√≥n√©v k√∂telez≈ë.'),
    body('email').isEmail().withMessage('√ârv√©nyes e-mail c√≠met adj meg.'),
    body('create_password')
        .isLength({ min: 8 })
        .withMessage('A jelsz√≥nak legal√°bb 8 karakter hossz√∫nak kell lennie.')
        .matches(/[0-9]/)
        .withMessage('A jelsz√≥nak tartalmaznia kell sz√°mot.')
        .matches(/[A-Z]/)
        .withMessage('A jelsz√≥nak tartalmaznia kell nagybet≈±t.')
        .matches(/[!@#$%^&*(),.?":{}|<>]/)
        .withMessage('A jelsz√≥nak tartalmaznia kell speci√°lis karaktert.'),
    body('confirm_password')
        .custom((value, { req }) => value === req.body.create_password)
        .withMessage('A jelszavak nem egyeznek.'),
]

// ‚úÖ **Regisztr√°ci√≥ kezel√©se**
const register = async (req, res) => {
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() })
    }

    const { last_name, first_name, username, email, create_password } = req.body

    try {
        // üü¢ **Megn√©zz√ºk, van-e m√°r regisztr√°lt felhaszn√°l√≥**
        const userCount = await User.count()
        const role = userCount === 0 ? 'admin' : 'user'

        // üü¢ **Ellen≈ërizz√ºk, hogy az e-mail vagy a felhaszn√°l√≥n√©v m√°r l√©tezik-e**
        const existingUser = await User.findOne({
            where: {
                email,
            },
        })

        if (existingUser) {
            return res.status(400).json({ errors: [{ msg: 'A felhaszn√°l√≥n√©v vagy az e-mail c√≠m m√°r foglalt.' }] })
        }

        // üü¢ **Jelsz√≥ hash-el√©se**
        const hashedPassword = await bcrypt.hash(create_password, 10)
        const fullName = `${last_name} ${first_name}`

        // üü¢ **Felhaszn√°l√≥ l√©trehoz√°sa**
        await User.create({
            name: fullName,
            username,
            email,
            password: hashedPassword,
            role,
        })

        logger.info(`√öj felhaszn√°l√≥ regisztr√°lt: ${username} (${email}), szerep: ${role}`)

        req.session.message = {
            message: 'Sikeres regisztr√°ci√≥!',
            type: 'success',
        }

        return res.json({ success: true, redirect: '/login' })
    } catch (error) {
        logger.error(`Hiba t√∂rt√©nt a regisztr√°ci√≥ sor√°n: ${error.message}`)
        return res.status(500).json({ errors: [{ msg: 'Szerverhiba t√∂rt√©nt, pr√≥b√°ld √∫jra!' }] })
    }
}

module.exports = { register, validateRegister }
